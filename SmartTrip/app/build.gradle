apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "org.fruct.oss.smarttrip"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

//        ndk {
//            moduleName "TestLib" // Name of C++ module (i.e. libSeePlusPlus)
//            cFlags "-pthread -fexceptions" +
//                    " -I${projectDir}/src/main/jni/smart" +
//                    " -I${projectDir}/src/main/jni/smart/expat" +
//                    " -DMTENABLE" // Add provisions to allow C++11 functionality
//            stl "gnustl_shared" // Which STL library to use: gnustl or stlport
//        }

    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    // From CrystalX NDK website
    sourceSets.main.jni.srcDirs = [] // disable automatic ndk-build call, which ignore our Android.mk
    sourceSets.main.jniLibs.srcDir 'src/main/libs'
    task ndkBuild(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd()
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild
    }

    task cleanNative(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd(), 'clean'
    }

    clean.dependsOn cleanNative
    // End of CrystalX NDK code
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:recyclerview-v7:23.1.0'

    // Material design navigation drawer
    compile('com.mikepenz:materialdrawer:4.4.5@aar') {
        transitive = true
    }

    // Material design dialogs
    compile('com.github.afollestad.material-dialogs:core:0.8.5.0@aar') {
        transitive = true
    }

    // Map library
    compile 'org.mapsforge:mapsforge-map-android:0.5.1'

    // Location library
    compile 'com.google.android.gms:play-services-location:8.1.0'

    // Event bus
    compile 'de.greenrobot:eventbus:2.4.0'

    // Asynchronous job library
    compile 'com.birbit:android-priority-jobqueue:1.3.4'
}

// From CrystalX NDK website
def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    return ndkbuild
}
// End of CrystalX NDK code

def coreWrapperDir = new File("${projectDir}/src/main/java/org/fruct/oss/smarttrip/jni")

task createCoreWrapperDir {
    coreWrapperDir.mkdirs()
}

task runSwig(type:Exec, dependsOn: ['createCoreWrapperDir']) {
    commandLine 'swig'
    args '-c++', '-java', '-package', 'org.fruct.oss.smarttrip.jni', '-outdir', coreWrapperDir.absolutePath, "${projectDir}/src/main/jni/Smart.i"
}